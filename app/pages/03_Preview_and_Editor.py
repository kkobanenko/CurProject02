import os
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
from app.db.repository import get_job, get_upload, get_artifacts_by_job
from app.settings import settings

st.set_page_config(page_title="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä - Melody‚ÜíScore", page_icon="üéµ")

# Page header
st.title("üéµ 03 ¬∑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä")
st.markdown("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.")

# Check for active job
job_id = st.session_state.get("last_job_id")
if not job_id:
    st.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **01_–ó–∞–≥—Ä—É–∑–∫–∞** –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.")
    st.stop()

# Get job information
try:
    job = get_job(job_id)
    if not job:
        st.error(f"‚ùå –ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        st.stop()
    
    upload = get_upload(job.upload_id)
    if not upload:
        st.error(f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        st.stop()
    
    # Job status check
    if job.status != "done":
        st.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {job.status}, –ü—Ä–æ–≥—Ä–µ—Å—Å: {job.progress}%")
        st.info("üîÑ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
        st.stop()
    
    # Job metadata
    st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("ID –∑–∞–¥–∞—á–∏", job_id)
    with col2:
        st.metric("–§–∞–π–ª", upload.filename)
    with col3:
        st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{upload.duration_sec} —Å–µ–∫")
    with col4:
        if job.finished_at:
            st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–∞", job.finished_at.strftime("%H:%M:%S"))
    
    # Get artifacts
    artifacts = get_artifacts_by_job(job_id)
    artifact_paths = {a.kind: a.path for a in artifacts}
    
    # Job directory
    job_dir = os.path.join(settings.storage_dir, f"job_{job_id}")
    
    # Parameters display
    with st.expander("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
        params = job.params_json
        st.json(params)
    
    # Audio preview
    st.subheader("üéµ –ê—É–¥–∏–æ–ø—Ä–µ–≤—å—é")
    
    if "audio_preview" in artifact_paths and os.path.exists(artifact_paths["audio_preview"]):
        st.audio(artifact_paths["audio_preview"], format="audio/wav")
        
        # Audio comparison
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**–û—Ä–∏–≥–∏–Ω–∞–ª:**")
            st.audio(upload.path, format=f"audio/{upload.ext}")
        with col2:
            st.markdown("**–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–ª–æ–¥–∏—è:**")
            st.audio(artifact_paths["audio_preview"], format="audio/wav")
    else:
        st.warning("‚ö†Ô∏è –ê—É–¥–∏–æ–ø—Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # Score visualization
    st.subheader("üìú –ù–æ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å")
    
    # Check for different score formats
    score_available = False
    
    if "png" in artifact_paths and os.path.exists(artifact_paths["png"]):
        st.markdown("**PNG —Ä–µ–Ω–¥–µ—Ä:**")
        st.image(artifact_paths["png"], caption="–ù–æ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å (PNG)")
        score_available = True
    
    if "pdf" in artifact_paths and os.path.exists(artifact_paths["pdf"]):
        st.markdown("**PDF —Ä–µ–Ω–¥–µ—Ä:**")
        with open(artifact_paths["pdf"], "rb") as f:
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å PDF",
                data=f.read(),
                file_name=f"score_{job_id}.pdf",
                mime="application/pdf"
            )
        score_available = True
    
    if "musicxml" in artifact_paths and os.path.exists(artifact_paths["musicxml"]):
        st.markdown("**MusicXML —Ñ–∞–π–ª:**")
        with open(artifact_paths["musicxml"], "r") as f:
            musicxml_content = f.read()
        
        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å MusicXML",
                data=musicxml_content,
                file_name=f"score_{job_id}.musicxml",
                mime="application/xml"
            )
        with col2:
            if st.button("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å MusicXML"):
                st.code(musicxml_content, language="xml")
        
        score_available = True
    
    if not score_available:
        st.error("‚ùå –ù–æ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        st.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ–Ω–¥–µ—Ä–µ—Ä (MuseScore/Verovio) –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    
    # Note editor (simplified)
    st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ—Ç")
    
    # Create sample note data for demonstration
    if "musicxml" in artifact_paths:
        try:
            # Parse basic note information from MusicXML
            import xml.etree.ElementTree as ET
            tree = ET.parse(artifact_paths["musicxml"])
            root = tree.getroot()
            
            # Extract notes (simplified)
            notes_data = []
            for note in root.findall(".//note"):
                pitch_elem = note.find("pitch")
                duration_elem = note.find("duration")
                
                if pitch_elem is not None:
                    step = pitch_elem.find("step")
                    octave = pitch_elem.find("octave")
                    if step is not None and octave is not None:
                        pitch = f"{step.text}{octave.text}"
                        duration = float(duration_elem.text) / 4 if duration_elem is not None else 1.0
                        notes_data.append({
                            "–ù–æ—Ç–∞": pitch,
                            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": f"{duration:.2f}",
                            "–¢–∞–∫—Ç": len(notes_data) // 4 + 1
                        })
            
            if notes_data:
                df = pd.DataFrame(notes_data)
                st.markdown("**–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –Ω–æ—Ç—ã:**")
                st.dataframe(df, use_container_width=True)
                
                # Note editing interface
                st.markdown("**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ç:**")
                st.info("üí° –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
                
                # Export edited notes
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                    st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–¥–µ–º–æ)")
            else:
                st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ—Ç—ã –∏–∑ MusicXML")
                
        except Exception as e:
            st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MusicXML: {e}")
    
    # Statistics and analysis
    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    if "musicxml" in artifact_paths:
        try:
            # Basic statistics
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("–í—Å–µ–≥–æ –Ω–æ—Ç", len(notes_data) if 'notes_data' in locals() else "N/A")
            with col2:
                if 'notes_data' in locals() and notes_data:
                    unique_pitches = len(set(note["–ù–æ—Ç–∞"] for note in notes_data))
                    st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ—Ç", unique_pitches)
                else:
                    st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ—Ç", "N/A")
            with col3:
                if 'notes_data' in locals() and notes_data:
                    avg_duration = sum(float(note["–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]) for note in notes_data) / len(notes_data)
                    st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{avg_duration:.2f}")
                else:
                    st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "N/A")
            
            # Pitch distribution chart
            if 'notes_data' in locals() and notes_data:
                pitch_counts = {}
                for note in notes_data:
                    pitch = note["–ù–æ—Ç–∞"]
                    pitch_counts[pitch] = pitch_counts.get(pitch, 0) + 1
                
                fig = px.bar(
                    x=list(pitch_counts.keys()),
                    y=list(pitch_counts.values()),
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ—Ç –ø–æ –≤—ã—Å–æ—Ç–µ",
                    labels={"x": "–ù–æ—Ç–∞", "y": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"}
                )
                st.plotly_chart(fig, use_container_width=True)
                
        except Exception as e:
            st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # Navigation
    st.markdown("---")
    st.markdown("**–ù–∞–≤–∏–≥–∞—Ü–∏—è:**")
    st.markdown("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **04_–≠–∫—Å–ø–æ—Ä—Ç** –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
    st.markdown("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **05_–ò—Å—Ç–æ—Ä–∏—è** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á")
    
    # Auto-refresh option
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        st.rerun()

except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
