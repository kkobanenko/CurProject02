import streamlit as st
import json
from datetime import datetime
from app.db.repository import get_job, get_upload, update_job_status
from app.tasks.utils import get_job_progress, cancel_job, retry_failed_job

st.set_page_config(page_title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ - Melody‚ÜíScore", page_icon="‚öôÔ∏è")

# Page header
st.title("‚öôÔ∏è 02 ¬∑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
st.markdown("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

# Check if we have a job from previous page
if "last_job_id" not in st.session_state:
    st.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **01_–ó–∞–≥—Ä—É–∑–∫–∞** –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.")
    st.stop()

job_id = st.session_state["last_job_id"]

# Get job information
try:
    job = get_job(job_id)
    if not job:
        st.error(f"‚ùå –ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        st.stop()
    
    upload = get_upload(job.upload_id)
    if not upload:
        st.error(f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        st.stop()
    
    # Job status and progress
    st.subheader("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("ID –∑–∞–¥–∞—á–∏", job_id)
    with col2:
        status_color = {
            "queued": "üü°",
            "running": "üü¢", 
            "done": "‚úÖ",
            "failed": "‚ùå",
            "cancelled": "‚èπÔ∏è"
        }.get(job.status, "‚ùì")
        st.metric("–°—Ç–∞—Ç—É—Å", f"{status_color} {job.status}")
    with col3:
        st.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", f"{job.progress}%")
    with col4:
        if job.created_at:
            st.metric("–°–æ–∑–¥–∞–Ω–∞", job.created_at.strftime("%H:%M:%S"))
    
    # Progress bar
    st.progress(job.progress / 100)
    
    # Job details
    with st.expander("üìã –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**–§–∞–π–ª:**")
            st.code(f"–ò–º—è: {upload.filename}")
            st.code(f"–†–∞–∑–º–µ—Ä: {upload.size_bytes / (1024*1024):.1f} –ú–ë")
            st.code(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {upload.duration_sec} —Å–µ–∫")
            st.code(f"–ß–∞—Å—Ç–æ—Ç–∞: {upload.sr} –ì—Ü")
        
        with col2:
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
            params = job.params_json
            st.json(params)
    
    # Job actions
    st.subheader("üéõÔ∏è –î–µ–π—Å—Ç–≤–∏—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if job.status in ["queued", "running"]:
            if st.button("‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", type="secondary"):
                if cancel_job(job_id):
                    st.success("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
        else:
            st.button("‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", disabled=True)
    
    with col2:
        if job.status == "failed":
            if st.button("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É", type="secondary"):
                if retry_failed_job(job_id):
                    st.success("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É")
        else:
            st.button("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É", disabled=True)
    
    with col3:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", type="secondary"):
            st.rerun()
    
    # Error information
    if job.status == "failed" and job.error:
        st.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        st.code(job.error)
    
    # Parameter modification (for queued jobs)
    if job.status == "queued":
        st.subheader("üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        st.info("üí° –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏, –ø–æ–∫–∞ –æ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥–∏")
        
        with st.form("modify_params"):
            st.markdown("**–ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
            
            col1, col2 = st.columns(2)
            
            with col1:
                new_separation = st.selectbox(
                    "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
                    ["none", "demucs", "spleeter"],
                    index=["none", "demucs", "spleeter"].index(params.get("separation", "demucs")),
                    format_func=lambda x: {
                        "none": "–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
                        "demucs": "Demucs",
                        "spleeter": "Spleeter"
                    }[x]
                )
                
                new_f0_backend = st.selectbox(
                    "–ú–µ—Ç–æ–¥ F0",
                    ["torchcrepe", "pyin"],
                    index=["torchcrepe", "pyin"].index(params.get("f0_backend", "torchcrepe")),
                    format_func=lambda x: {
                        "torchcrepe": "Torchcrepe",
                        "pyin": "pYIN"
                    }[x]
                )
            
            with col2:
                new_quantization_grid = st.selectbox(
                    "–°–µ—Ç–∫–∞ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è",
                    [0.25, 0.125, 0.5, 1.0],
                    index=[0.25, 0.125, 0.5, 1.0].index(params.get("quantization_grid", 0.25)),
                    format_func=lambda x: f"{x} (1/{int(1/x)})"
                )
                
                new_time_signature = st.selectbox(
                    "–†–∞–∑–º–µ—Ä",
                    ["4/4", "3/4", "2/4", "6/8", "3/8", "2/2"],
                    index=["4/4", "3/4", "2/4", "6/8", "3/8", "2/2"].index(params.get("time_signature", "4/4"))
                )
            
            submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            
            if submitted:
                # Update parameters
                new_params = params.copy()
                new_params.update({
                    "separation": new_separation,
                    "f0_backend": new_f0_backend,
                    "quantization_grid": new_quantization_grid,
                    "time_signature": new_time_signature
                })
                
                # Update job
                update_job_status(job_id, params_json=new_params)
                st.success("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                st.rerun()
    
    # Navigation
    st.markdown("---")
    st.markdown("**–ù–∞–≤–∏–≥–∞—Ü–∏—è:**")
    
    if job.status == "done":
        st.success("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **03_–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    elif job.status == "failed":
        st.error("‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å")
    elif job.status == "running":
        st.info("üîÑ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    else:
        st.info("‚è≥ –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    # Auto-refresh for running jobs
    if job.status == "running":
        st.markdown("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        st.rerun()

except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ: {e}")
    st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
