import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from app.db.repository import get_uploads, get_jobs_by_upload, get_database_stats, cleanup_old_data

st.set_page_config(page_title="–ò—Å—Ç–æ—Ä–∏—è - Melody‚ÜíScore", page_icon="üìö")

# Page header
st.title("üìö 05 ¬∑ –ò—Å—Ç–æ—Ä–∏—è")
st.markdown("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –∏ –∑–∞–¥–∞—á —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.")

# Database statistics
try:
    stats = get_database_stats()
    
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ó–∞–≥—Ä—É–∑–æ–∫", stats.get("uploads", 0))
    with col2:
        st.metric("–ó–∞–¥–∞—á", stats.get("jobs", 0))
    with col3:
        st.metric("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤", stats.get("artifacts", 0))
    with col4:
        st.metric("–õ–æ–≥–æ–≤", stats.get("logs", 0))
    
    # Jobs by status
    if stats.get("jobs_by_status"):
        st.markdown("**–ó–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É:**")
        status_cols = st.columns(len(stats["jobs_by_status"]))
        for i, (status, count) in enumerate(stats["jobs_by_status"].items()):
            with status_cols[i]:
                status_icons = {
                    "queued": "üü°",
                    "running": "üü¢",
                    "done": "‚úÖ",
                    "failed": "‚ùå",
                    "cancelled": "‚èπÔ∏è"
                }
                icon = status_icons.get(status, "‚ùì")
                st.metric(f"{icon} {status.title()}", count)
    
    # Cleanup section
    st.subheader("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    with col1:
        days_to_keep = st.slider(
            "–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ (–¥–Ω–µ–π)",
            min_value=1,
            max_value=30,
            value=7,
            help="–£–¥–∞–ª–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"
        )
    
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ", type="secondary"):
            with st.spinner("–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                try:
                    deleted_counts = cleanup_old_data(days_to_keep)
                    st.success(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {deleted_counts}")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    # Uploads list
    st.subheader("üìÅ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫")
    
    # Filter options
    col1, col2, col3 = st.columns(3)
    
    with col1:
        limit = st.selectbox(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π",
            [10, 25, 50, 100],
            index=1
        )
    
    with col2:
        show_only_completed = st.checkbox(
            "–¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ",
            value=False,
            help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"
        )
    
    with col3:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"):
            st.rerun()
    
    # Get uploads
    uploads = get_uploads(limit=limit)
    
    if not uploads:
        st.info("üìã –ù–µ—Ç –∑–∞–≥—Ä—É–∑–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏")
        st.stop()
    
    # Create uploads dataframe
    uploads_data = []
    for upload in uploads:
        # Get jobs for this upload
        jobs = get_jobs_by_upload(upload.id)
        
        # Filter by completion status if requested
        if show_only_completed:
            if not any(job.status == "done" for job in jobs):
                continue
        
        # Get latest job
        latest_job = jobs[0] if jobs else None
        
        uploads_data.append({
            "ID": upload.id,
            "–§–∞–π–ª": upload.filename,
            "–†–∞–∑–º–µ—Ä (–ú–ë)": f"{upload.size_bytes / (1024*1024):.1f}",
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)": upload.duration_sec,
            "–ó–∞–≥—Ä—É–∂–µ–Ω": upload.created_at.strftime("%Y-%m-%d %H:%M:%S"),
            "–ó–∞–¥–∞—á": len(jobs),
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å": latest_job.status if latest_job else "–ù–µ—Ç",
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å": f"{latest_job.progress}%" if latest_job else "N/A"
        })
    
    if uploads_data:
        df = pd.DataFrame(uploads_data)
        st.dataframe(df, use_container_width=True)
        
        # Upload details
        st.subheader("üìã –î–µ—Ç–∞–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
        
        selected_upload_id = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π",
            options=[row["ID"] for row in uploads_data],
            format_func=lambda x: f"ID {x} - {next(row['–§–∞–π–ª'] for row in uploads_data if row['ID'] == x)}"
        )
        
        if selected_upload_id:
            # Get upload details
            selected_upload = next(u for u in uploads if u.id == selected_upload_id)
            selected_jobs = get_jobs_by_upload(selected_upload_id)
            
            # Upload info
            col1, col2, col3 = st.columns(3)
            with col1:
                st.markdown("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:**")
                st.write(f"**–ò–º—è:** {selected_upload.filename}")
                st.write(f"**–†–∞–∑–º–µ—Ä:** {selected_upload.size_bytes / (1024*1024):.1f} –ú–ë")
                st.write(f"**–§–æ—Ä–º–∞—Ç:** {selected_upload.ext}")
            with col2:
                st.markdown("**–ê—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                st.write(f"**–ß–∞—Å—Ç–æ—Ç–∞:** {selected_upload.sr} –ì—Ü")
                st.write(f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {selected_upload.duration_sec} —Å–µ–∫")
                st.write(f"**–ü—É—Ç—å:** {selected_upload.path}")
            with col3:
                st.markdown("**–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")
                st.write(f"**ID:** {selected_upload.id}")
                st.write(f"**–ó–∞–≥—Ä—É–∂–µ–Ω:** {selected_upload.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
                st.write(f"**–ó–∞–¥–∞—á:** {len(selected_jobs)}")
            
            # Jobs for this upload
            if selected_jobs:
                st.markdown("**–ó–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:**")
                
                jobs_data = []
                for job in selected_jobs:
                    jobs_data.append({
                        "ID –∑–∞–¥–∞—á–∏": job.id,
                        "–°—Ç–∞—Ç—É—Å": job.status,
                        "–ü—Ä–æ–≥—Ä–µ—Å—Å": f"{job.progress}%",
                        "–°–æ–∑–¥–∞–Ω–∞": job.created_at.strftime("%Y-%m-%d %H:%M:%S"),
                        "–ó–∞–≤–µ—Ä—à–µ–Ω–∞": job.finished_at.strftime("%Y-%m-%d %H:%M:%S") if job.finished_at else "N/A",
                        "–û—à–∏–±–∫–∞": job.error[:50] + "..." if job.error and len(job.error) > 50 else job.error or "N/A"
                    })
                
                jobs_df = pd.DataFrame(jobs_data)
                st.dataframe(jobs_df, use_container_width=True)
                
                # Job actions
                if selected_jobs:
                    latest_job = selected_jobs[0]  # Most recent
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if latest_job.status == "done":
                            st.success("‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                            if st.button("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", key="view_results"):
                                st.session_state["last_job_id"] = latest_job.id
                                st.success("‚úÖ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **03_–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        elif latest_job.status == "failed":
                            st.error("‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                            if st.button("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É", key="retry_job"):
                                from app.tasks.utils import retry_failed_job
                                if retry_failed_job(latest_job.id):
                                    st.success("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
                                    st.rerun()
                                else:
                                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É")
                        else:
                            st.info(f"‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: {latest_job.status}")
                    
                    with col2:
                        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", key="delete_upload", type="secondary"):
                            from app.db.repository import delete_upload
                            if delete_upload(selected_upload_id):
                                st.success("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
                                st.rerun()
                            else:
                                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")
            else:
                st.info("üìã –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
    else:
        st.info("üìã –ù–µ—Ç –∑–∞–≥—Ä—É–∑–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º")
    
    # Navigation
    st.markdown("---")
    st.markdown("**–ù–∞–≤–∏–≥–∞—Ü–∏—è:**")
    st.markdown("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **01_–ó–∞–≥—Ä—É–∑–∫–∞** –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
    st.markdown("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **02_–ù–∞—Å—Ç—Ä–æ–π–∫–∏** –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")

except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
