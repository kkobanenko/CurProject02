import os
import streamlit as st
import zipfile
import tempfile
from datetime import datetime
from app.db.repository import get_job, get_upload, get_artifacts_by_job
from app.settings import settings

st.set_page_config(page_title="–≠–∫—Å–ø–æ—Ä—Ç - Melody‚ÜíScore", page_icon="üì§")

# Page header
st.title("üì§ 04 ¬∑ –≠–∫—Å–ø–æ—Ä—Ç")
st.markdown("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.")

# Check for active job
job_id = st.session_state.get("last_job_id")
if not job_id:
    st.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **01_–ó–∞–≥—Ä—É–∑–∫–∞** –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.")
    st.stop()

# Get job information
try:
    job = get_job(job_id)
    if not job:
        st.error(f"‚ùå –ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        st.stop()
    
    upload = get_upload(job.upload_id)
    if not upload:
        st.error(f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        st.stop()
    
    # Job status check
    if job.status != "done":
        st.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {job.status}, –ü—Ä–æ–≥—Ä–µ—Å—Å: {job.progress}%")
        st.info("üîÑ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
        st.stop()
    
    # Job info
    st.subheader("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("ID –∑–∞–¥–∞—á–∏", job_id)
    with col2:
        st.metric("–§–∞–π–ª", upload.filename)
    with col3:
        if job.finished_at:
            st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–∞", job.finished_at.strftime("%H:%M:%S"))
    
    # Get artifacts
    artifacts = get_artifacts_by_job(job_id)
    artifact_paths = {a.kind: a.path for a in artifacts}
    
    # Job directory
    job_dir = os.path.join(settings.storage_dir, f"job_{job_id}")
    
    # File availability check
    st.subheader("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã")
    
    file_status = {}
    for kind, path in artifact_paths.items():
        if os.path.exists(path):
            file_size = os.path.getsize(path) / (1024 * 1024)  # MB
            file_status[kind] = {"exists": True, "size": file_size}
        else:
            file_status[kind] = {"exists": False, "size": 0}
    
    # Display file status
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        if file_status.get("musicxml", {}).get("exists"):
            st.success("‚úÖ MusicXML")
            st.caption(f"{file_status['musicxml']['size']:.1f} –ú–ë")
        else:
            st.error("‚ùå MusicXML")
    with col2:
        if file_status.get("pdf", {}).get("exists"):
            st.success("‚úÖ PDF")
            st.caption(f"{file_status['pdf']['size']:.1f} –ú–ë")
        else:
            st.error("‚ùå PDF")
    with col3:
        if file_status.get("png", {}).get("exists"):
            st.success("‚úÖ PNG")
            st.caption(f"{file_status['png']['size']:.1f} –ú–ë")
        else:
            st.error("‚ùå PNG")
    with col4:
        if file_status.get("audio_preview", {}).get("exists"):
            st.success("‚úÖ WAV")
            st.caption(f"{file_status['audio_preview']['size']:.1f} –ú–ë")
        else:
            st.error("‚ùå WAV")
    
    # Individual file downloads
    st.subheader("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
    
    # MusicXML
    if file_status.get("musicxml", {}).get("exists"):
        with open(artifact_paths["musicxml"], "r") as f:
            musicxml_content = f.read()
        
        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å MusicXML",
                data=musicxml_content,
                file_name=f"score_{job_id}.musicxml",
                mime="application/xml",
                help="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏"
            )
        with col2:
            st.info("üéº MusicXML - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–æ—Ç–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤")
    else:
        st.warning("‚ö†Ô∏è MusicXML —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # PDF
    if file_status.get("pdf", {}).get("exists"):
        with open(artifact_paths["pdf"], "rb") as f:
            pdf_content = f.read()
        
        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å PDF",
                data=pdf_content,
                file_name=f"score_{job_id}.pdf",
                mime="application/pdf",
                help="–í–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏"
            )
        with col2:
            st.info("üìÑ PDF - –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    else:
        st.warning("‚ö†Ô∏è PDF —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # PNG
    if file_status.get("png", {}).get("exists"):
        with open(artifact_paths["png"], "rb") as f:
            png_content = f.read()
        
        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                label="üñºÔ∏è –°–∫–∞—á–∞—Ç—å PNG",
                data=png_content,
                file_name=f"score_{job_id}.png",
                mime="image/png",
                help="–†–∞—Å—Ç—Ä–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–µ–±"
            )
        with col2:
            st.info("üñºÔ∏è PNG - —Ä–∞—Å—Ç—Ä–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü")
    else:
        st.warning("‚ö†Ô∏è PNG —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # Audio preview
    if file_status.get("audio_preview", {}).get("exists"):
        with open(artifact_paths["audio_preview"], "rb") as f:
            wav_content = f.read()
        
        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                label="üéµ –°–∫–∞—á–∞—Ç—å WAV",
                data=wav_content,
                file_name=f"preview_{job_id}.wav",
                mime="audio/wav",
                help="–ê—É–¥–∏–æ–ø—Ä–µ–≤—å—é —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–µ–ª–æ–¥–∏–∏"
            )
        with col2:
            st.info("üéµ WAV - –∞—É–¥–∏–æ–ø—Ä–µ–≤—å—é —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–µ–ª–æ–¥–∏–∏")
    else:
        st.warning("‚ö†Ô∏è WAV —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # Batch download
    st.subheader("üì¶ –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
    
    available_files = [kind for kind, status in file_status.items() if status.get("exists")]
    
    if available_files:
        # Create ZIP archive
        if st.button("üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã (ZIP)", type="primary"):
            try:
                with tempfile.NamedTemporaryFile(delete=False, suffix=".zip") as tmp_file:
                    with zipfile.ZipFile(tmp_file.name, 'w') as zipf:
                        for kind in available_files:
                            file_path = artifact_paths[kind]
                            file_name = f"{kind}_{job_id}.{kind}"
                            zipf.write(file_path, file_name)
                    
                    # Read ZIP content
                    with open(tmp_file.name, "rb") as f:
                        zip_content = f.read()
                    
                    # Clean up temp file
                    os.unlink(tmp_file.name)
                    
                    # Download ZIP
                    st.download_button(
                        label="üì¶ –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤",
                        data=zip_content,
                        file_name=f"melody2score_{job_id}.zip",
                        mime="application/zip",
                        key="zip_download"
                    )
                    
                    st.success("‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP –∞—Ä—Ö–∏–≤–∞: {e}")
    else:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    
    # Export options
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞")
    
    with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"):
        st.markdown("**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:**")
        
        formats = {
            "MusicXML": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–æ—Ç–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ (MuseScore, Finale, Sibelius)",
            "PDF": "–í–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            "PNG": "–†–∞—Å—Ç—Ä–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π",
            "MIDI": "MIDI —Ñ–∞–π–ª –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤ –∏ DAW",
            "WAV": "–ê—É–¥–∏–æ–ø—Ä–µ–≤—å—é —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–µ–ª–æ–¥–∏–∏"
        }
        
        for format_name, description in formats.items():
            st.markdown(f"‚Ä¢ **{format_name}**: {description}")
        
        st.markdown("**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**")
        planned_formats = [
            "SVG - –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤–µ–±",
            "EPS - –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏",
            "MP3 - —Å–∂–∞—Ç–æ–µ –∞—É–¥–∏–æ",
            "FLAC - –±–µ–∑–ø–æ—Ç–µ—Ä—å–Ω–æ–µ –∞—É–¥–∏–æ"
        ]
        
        for format_name in planned_formats:
            st.markdown(f"‚Ä¢ {format_name}")
    
    # File information
    st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö")
    
    if available_files:
        file_info_data = []
        for kind in available_files:
            path = artifact_paths[kind]
            size_mb = os.path.getsize(path) / (1024 * 1024)
            modified_time = datetime.fromtimestamp(os.path.getmtime(path))
            
            file_info_data.append({
                "–§–æ—Ä–º–∞—Ç": kind.upper(),
                "–†–∞–∑–º–µ—Ä (–ú–ë)": f"{size_mb:.2f}",
                "–ò–∑–º–µ–Ω–µ–Ω": modified_time.strftime("%Y-%m-%d %H:%M:%S"),
                "–ü—É—Ç—å": os.path.basename(path)
            })
        
        import pandas as pd
        df = pd.DataFrame(file_info_data)
        st.dataframe(df, use_container_width=True)
    else:
        st.info("üìã –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    # Navigation
    st.markdown("---")
    st.markdown("**–ù–∞–≤–∏–≥–∞—Ü–∏—è:**")
    st.markdown("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **03_–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    st.markdown("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **05_–ò—Å—Ç–æ—Ä–∏—è** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á")
    
    # Refresh option
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"):
        st.rerun()

except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
