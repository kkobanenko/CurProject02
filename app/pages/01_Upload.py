import os
import streamlit as st
import time
from datetime import datetime
import plotly.graph_objects as go
import numpy as np
from app.settings import settings
from app.db.repository import create_upload
from app.tasks.utils import submit_transcription_job
from app.audio.io import get_audio_info, validate_audio

st.set_page_config(page_title="–ó–∞–≥—Ä—É–∑–∫–∞ - Melody‚ÜíScore", page_icon="üéº")

# Page header
st.title("üéº 01 ¬∑ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–ª–æ–¥–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.")

# File uploader
uploaded_file = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª",
    type=["mp3", "wav", "flac", "m4a", "ogg"],
    help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, FLAC, M4A, OGG. –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç, 100 –ú–ë"
)

if not uploaded_file:
    st.info("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    st.stop()

# File validation and info
try:
    # Save uploaded file
    os.makedirs(settings.storage_dir, exist_ok=True)
    file_path = os.path.join(settings.storage_dir, uploaded_file.name)
    
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    
    # Get file info
    file_info = get_audio_info(file_path)
    
    # Validate file
    try:
        validate_audio(file_path, settings.max_duration_sec, settings.max_file_mb)
        st.success("‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        st.stop()
    
    # Display file info
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–†–∞–∑–º–µ—Ä", f"{file_info['size_mb']:.1f} –ú–ë")
    with col2:
        st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{file_info['duration_sec']:.1f} —Å–µ–∫")
    with col3:
        st.metric("–ß–∞—Å—Ç–æ—Ç–∞", f"{file_info['sample_rate']} –ì—Ü")
    
    # Audio player
    st.subheader("üéµ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ")
    st.audio(file_path, format=f"audio/{file_info['extension']}")
    
    # Waveform visualization
    try:
        import librosa
        y, sr = librosa.load(file_path, sr=None, duration=30)  # Load first 30 seconds
        
        # Create waveform plot
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            y=y[::100],  # Downsample for performance
            mode='lines',
            name='Waveform',
            line=dict(color='#1f77b4', width=1)
        ))
        fig.update_layout(
            title="–í–æ–ª–Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞ (–ø–µ—Ä–≤—ã–µ 30 —Å–µ–∫—É–Ω–¥)",
            xaxis_title="–í—Ä–µ–º—è (—Å—ç–º–ø–ª—ã)",
            yaxis_title="–ê–º–ø–ª–∏—Ç—É–¥–∞",
            height=200,
            showlegend=False
        )
        st.plotly_chart(fig, use_container_width=True)
        
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é: {e}")
    
    # Processing parameters
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤**")
        separation = st.selectbox(
            "–ú–µ—Ç–æ–¥ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            ["none", "demucs", "spleeter"],
            format_func=lambda x: {
                "none": "–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
                "demucs": "Demucs (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                "spleeter": "Spleeter"
            }[x],
            help="–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∫–∞–ª–∞ –∏ –∞–∫–∫–æ–º–ø–∞–Ω–µ–º–µ–Ω—Ç–∞"
        )
        
        st.markdown("**–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞**")
        highpass = st.checkbox("–í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä", value=True, help="–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —à—É–º–∞")
        denoise = st.checkbox("–®—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ", value=True, help="–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ")
        trim = st.checkbox("–û–±—Ä–µ–∑–∫–∞ —Ç–∏—à–∏–Ω—ã", value=True, help="–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏—à–∏–Ω—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ")
        normalize = st.checkbox("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è", value=True, help="–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏")
    
    with col2:
        st.markdown("**–ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã**")
        f0_backend = st.selectbox(
            "–ú–µ—Ç–æ–¥ F0",
            ["torchcrepe", "pyin"],
            format_func=lambda x: {
                "torchcrepe": "Torchcrepe (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                "pyin": "pYIN"
            }[x],
            help="–ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã"
        )
        
        st.markdown("**–ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ**")
        quantization_grid = st.selectbox(
            "–°–µ—Ç–∫–∞ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è",
            [0.25, 0.125, 0.5, 1.0],
            format_func=lambda x: f"{x} (1/{int(1/x)})",
            help="–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –¥–ª—è –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è —Ä–∏—Ç–º–∞"
        )
        
        min_note_duration = st.selectbox(
            "–ú–∏–Ω. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—Ç—ã",
            [0.125, 0.25, 0.5, 1.0],
            format_func=lambda x: f"{x} (1/{int(1/x)})",
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—Ç—ã"
        )
    
    # Advanced settings
    with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        col1, col2 = st.columns(2)
        
        with col1:
            auto_key = st.checkbox("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏", value=True)
            if not auto_key:
                key_signature = st.selectbox(
                    "–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                    ["C", "G", "D", "A", "E", "B", "F#", "C#", "F", "Bb", "Eb", "Ab", "Db", "Gb", "Cb"],
                    help="–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"
                )
            else:
                key_signature = "C"
            
            time_signature = st.selectbox(
                "–†–∞–∑–º–µ—Ä",
                ["4/4", "3/4", "2/4", "6/8", "3/8", "2/2"],
                help="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä"
            )
        
        with col2:
            tempo_qpm = st.number_input(
                "–¢–µ–º–ø (BPM)",
                min_value=40.0,
                max_value=200.0,
                value=120.0,
                step=5.0,
                help="–¢–µ–º–ø –≤ —É–¥–∞—Ä–∞—Ö –≤ –º–∏–Ω—É—Ç—É (0 = –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)"
            )
            
            synthesis_type = st.selectbox(
                "–¢–∏–ø —Å–∏–Ω—Ç–µ–∑–∞",
                ["sine", "piano"],
                format_func=lambda x: {
                    "sine": "–°–∏–Ω—É—Å–æ–∏–¥–∞",
                    "piano": "–ü–∏–∞–Ω–æ"
                }[x],
                help="–¢–∏–ø —Å–∏–Ω—Ç–µ–∑–∞ –¥–ª—è –∞—É–¥–∏–æ–ø—Ä–µ–≤—å—é"
            )
    
    # Submit button
    st.subheader("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    if st.button("üéµ –ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", type="primary", use_container_width=True):
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."):
            try:
                # Create upload record
                upload = create_upload(
                    filename=uploaded_file.name,
                    ext=file_info['extension'],
                    sr=file_info['sample_rate'],
                    duration_sec=int(file_info['duration_sec']),
                    size_bytes=file_info['size_mb'] * 1024 * 1024,
                    path=file_path
                )
                
                # Prepare parameters
                params = {
                    "separation": separation,
                    "highpass": highpass,
                    "denoise": denoise,
                    "trim": trim,
                    "normalize": normalize,
                    "f0_backend": f0_backend,
                    "quantization_grid": quantization_grid,
                    "min_note_duration": min_note_duration,
                    "auto_key": auto_key,
                    "key_signature": key_signature if not auto_key else "C",
                    "time_signature": time_signature,
                    "tempo_qpm": tempo_qpm if tempo_qpm > 0 else None,
                    "synthesis_type": synthesis_type,
                    "title": f"Extracted from {uploaded_file.name}"
                }
                
                # Submit job
                result = submit_transcription_job(upload.id, file_path, params)
                
                # Success message
                st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: {result['job_id']}")
                st.info(f"üìã –°—Ç–∞—Ç—É—Å: {result['status']}")
                
                # Store job ID in session state
                st.session_state["last_job_id"] = result['job_id']
                st.session_state["last_upload_id"] = upload.id
                
                # Navigation hint
                st.markdown("---")
                st.markdown("**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**")
                st.markdown("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **02_–ù–∞—Å—Ç—Ä–æ–π–∫–∏** –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                st.markdown("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **03_–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
                st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    st.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
